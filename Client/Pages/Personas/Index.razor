@page "/indice-personas"
@inject HttpClient Http
@inject IJSRuntime JS

<h3>Personas</h3>

<div>
    <a class="btn btn-success" href="crear-persona">Nueva Persona</a>
</div>

@if (personas == null) {
    <label>Cargando...</label>
} else if (personas.Length == 0) {
    <label>No hay personas</label>
} else {
    <table class="table">
        <thead>
            <tr>
                <th></th>
                <th>Id</th>
                <th>Nombre</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var persona in personas) {
                <tr>
                    <td>
                        <a class="btn btn-success" href="editar-persona/@persona.PersonaId">Editar</a>
                        <button class="btn btn-danger" @onclick="@(() => BorrarPersona(persona.PersonaId))">Borrar</button>
                    </td>
                    <td>@persona.PersonaId</td>
                    <td>@persona.Nombre</td>
                </tr>
            }
        </tbody>

    </table>
}

@code {
    public Persona[] personas { get; set; }

    protected override async Task OnInitializedAsync() {

        await CargarPersonas();
    }

    async Task CargarPersonas() {

        personas = await Http.GetJsonAsync<Persona[]>("personas");

    }

    async Task BorrarPersona(int personaId) {

        var personaSeleccionada = personas.First(p => p.PersonaId == personaId);

        string mensaje = $"Desea eliminar a {personaSeleccionada.Nombre}?";

        if (await JS.InvokeAsync<bool>("confirm", mensaje)) {

            await Http.DeleteAsync($"personas/{personaId}");
            await CargarPersonas();
        }


    }

}
